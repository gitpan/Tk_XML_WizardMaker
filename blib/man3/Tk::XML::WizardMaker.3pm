.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WizardMaker 3"
.TH WizardMaker 3 "2004-02-28" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Tk::XML::WizardMaker \- easy way to build the Software Assistants and
Installation Wizards based on XML description.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To use Tk::XML::WizardMaker just provide an \s-1XML\s0 file with descriptions of
the WizardMaker's features and of the feaures of all its pages. Then use
something like this:
.PP
.Vb 2
\&  use Tk;
\&  use Tk::XML::WizardMaker;
.Ve
.PP
.Vb 2
\&  my $mw = MainWindow->new();
\&  $mw->WizardMaker([<options>])->build_all();
.Ve
.PP
.Vb 1
\&  MainLoop;
.Ve
.PP
For \fBother usage possibilities\fR please see the methods description below.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "What is the Tk::XML::WizardMaker?"
.IX Subsection "What is the Tk::XML::WizardMaker?"
The Software Wizards are popular for tasks like software installation,
upgrade or just gathering of configuration options. There is a lot of
good software (often called as Install Schild) which provides
developers with APIs for building of those Wizards.
.PP
This package is just one \*(L"Install Shild\*(R" more.
.PP
Many of those Install Shields provide only \s-1API\s0 interface. You have
a lot of functions or methods to build a wizard page and to bind
some callbacks. So if you develope an install script, you have to
code in how to create and maintain all its wizard pages.
.PP
If you maintains this script some time later (because the new
release of your software is ready in 6 months), you will have to
change a lot of code. If you want to add a new page into the old
script, you have to program:
.PP
.Vb 3
\&  1. prepare variables to hold new values.
\&  2. the code to create the new page with all its components.
\&  3. changes in callbacks (what to do on the NEXT button)
.Ve
.PP
But all this is not your problem as it is a new developer
who must maintain your script now ...
.PP
After some new releases your script is less readeable and seems to
have bugs.
.PP
Not so if you use the Tk::XML::WizardMaker. It does provide an \s-1API\s0 interface
too, but it can help you separate the page building from what to do
with information gathered.
.PP
You just describe the entire wizard in \s-1XML\s0. All the pages will be than
generated automatically.
.PP
All callbacks can be described both in \s-1XML\s0 or directly in the script
code. All callbacks can be individual functions for every page \-
your code is more.
.PP
If you will maintain your script some time later, the only you
have to do is to program
.PP
.Vb 1
\&  1. what to do with new informations.
.Ve
.PP
All other things can be descriptive \s-1XML\s0 code.
.Sh "Why to use Tk::XML::WizardMaker?"
.IX Subsection "Why to use Tk::XML::WizardMaker?"
Here are some features of the Tk::XML::WizardMaker:
.IP "\(bu" 4
It is easy to use.
.IP "\(bu" 4
It separates the program logic from the \s-1GUI\s0 generation and event processing.
.IP "\(bu" 4
It provides a simle \s-1XML\s0 description of all \s-1GUI\s0 features in one file.
.IP "\(bu" 4
Some types of page layouts are predefined. So you can simply describe
what kind of page you wanto to have and which elemets have to be
displayed with it.
.IP "\(bu" 4
To add a new page into the Program is as simple as to write some
lines of \s-1XML\s0 code.
.IP "\(bu" 4
You don't have to insert any event handling code into
your program. But If you need this, it is possible to include
event handling subroutines direct into \s-1XML\s0 description for
any page.
.IP "\(bu" 4
An object oriented interface is although provided. So you can be
creative developing new page layouts and extending features.
.Sh "How to use It?"
.IX Subsection "How to use It?"
.IP "\fB1. \s-1GUI\s0 \s-1FILE\s0. Prepare \s-1XML\s0 file with \s-1GUI\s0 description.\fR" 4
.IX Item "1. GUI FILE. Prepare XML file with GUI description."
This file should look like this (four pages here, for more complex
examples look below in this document and in the demo files):
.RS 4
.IP "\(bu" 8
<my_assistent
.Sp
.Vb 3
\&  title="Demo WizardMaker"
\&  left_image="left_image.gif"
\&  top_image="top_image.gif">
.Ve
.Sp
.Vb 9
\&    <page name     = "Start"
\&          status   = "normal"
\&          type     = "TextPage"
\&          title    = "The first generic Page"
\&          subtitle = "The first generic Page Subtitle"
\&          text     = "The first generic Page Text"
\&          summary  = "Welcome to the Installatin WizardMaker. blah blah blah ..."
\&          help_text= "Press NEXT to install or CANCEL to abort!"
\&    />
.Ve
.Sp
.Vb 5
\&   <page name      ="UserInfo"
\&          status   ="normal"
\&          type     ="LabeledEntriesPage"
\&          title    ="User Information"
\&          subtitle ="Some customer data.">
.Ve
.Sp
.Vb 5
\&      <LabeledEntry name="Name"    title="Name"     status="normal"/>
\&      <LabeledEntry name="Company" title="Company"  status="normal" />
\&      <LabeledEntry name="Install_path"  title="Directory"
\&                    status="normal" button = "dir_select"/>
\&    </page>
.Ve
.Sp
.Vb 6
\&   <page name      ="SelectComponents"
\&          status   ="normal"
\&          type     ="CheckButtonPage"
\&          title    ="Software Components"
\&          subtitle ="List of available sotfware components."
\&          text     ="Please select components you want to install.">
.Ve
.Sp
.Vb 3
\&      <CheckButton name="Java"   title="Java SDK"     status="normal" />
\&      <CheckButton name="Office" title="Office Suite" status="normal" />
\&      <CheckButton name="DB"     title="Database"     status="normal" />
.Ve
.Sp
.Vb 1
\&    </page>
.Ve
.Sp
.Vb 14
\&    <page name="StartInstallation"
\&          status="normal"
\&          type="TextPage"
\&          title="Start Installation"
\&          subtitle="Installation will start now."
\&          text="Press Start button to process the Installation."
\&          summary="All software yuo have choosen will be installed. NOW!"
\&          help_text="Press Start button to process the Installation!"
\&          pre_next_button_code="
\&            print qq/\en\etYou can place the installation code here!/;
\&            sleep 3;
\&            return 1;
\&          "
\&    />
.Ve
.Sp
.Vb 8
\&    <page name     ="Finish"
\&          status   ="normal"
\&          type     ="TextPage"
\&          title    ="Finish"
\&          subtitle ="Installationd is complete."
\&          text     ="Press FINISH to end Wizard."
\&          summary  ="Installation complete."
\&    />
.Ve
.Sp
</my_assistent>
.RE
.RS 4
.Sp
I shell refer this file as \s-1GUI\s0.XML.
.Sp
In the current implementation, all structures comming from \s-1GUI\s0.XML
file are saved in hash \f(CW$self\fR\->{gui}. All pages constructed on the
basis of \s-1GUI\s0.XML are then saved in the hash \f(CW$self\fR\->{internal}\->{pages}.
This inplementation details can change, but there are methods to
refer to this structures.
.Sp
The \s-1XML\s0 files will be parsed with XML::Simple. So be carefull in
how to write the file.
.RE
.IP "\fB2. \s-1OPT\s0 \s-1FILE\s0. Optionally prepare \s-1XML\s0 file with Installation description.\fR" 4
.IX Item "2. OPT FILE. Optionally prepare XML file with Installation description."
This file should contain default values for \s-1GUI\s0 pages and action
descriptions to process installation. I shell refer this file as
\&\s-1OPT\s0.XML. It is not really nessesary. I use it for two reasons.
.Sp
.Vb 3
\&  - I want to separate the GUI from what to do to install the
\&    software. So I describe all the installation steps in this
\&    separate file. The tags here are free except of <gui> - tag.
.Ve
.Sp
.Vb 3
\&  - I want to have only one place for all variables used in the GUI.
\&    So I place all default values in the OPT file under <gui>. Then
\&    in the WizardMaker these variables can change values.
.Ve
.Sp
.Vb 3
\&    All them are currently maintained as $self->{opt}->{gui} hash.
\&    Use method gui_option() to get or set this values in your
\&    script.
.Ve
.Sp
.Vb 2
\&    This way all the variables can be comfortably pre- or
\&    postprocessed.
.Ve
.Sp
If you do not like the \s-1OPT\s0.XML you have just to set default values
manually in you script. See demo_04 for how to do so.
.Sp
A simple version of \s-1OPT\s0.XML may looks like this (the element names
here are the same as the corresponding attribute \*(L"name\*(R" in the \s-1GUI\s0
file). Once again \- only <gui> tag is important, all other tags
\&\s-1CAN\s0 be used by you to describe the installation steps.
.Sp
<opt>
.Sp
.Vb 1
\&  <gui>
.Ve
.Sp
.Vb 5
\&    <Name          value="MyName" />
\&    <Company       value="MyCompany" />
\&    <Office        value="1" />
\&    <DB            value="0" />
\&    <Install_path  value="C:\e\ePrograms" />
.Ve
.Sp
.Vb 1
\&  </gui>
.Ve
.Sp
.Vb 9
\&  <instal>
\&    <part name="database">
\&      <command="copy" src="D:\e\edatabase\e\edings.dll" dest="C:\e\eWINNT" />
\&      <command="exec" command="SetupDB.exe" dest="$self->gui_option(q/Install_path/)" />
\&      <command="eval" command="
\&        main::patch_registry(qq/Software\e\emyDB\e\edescription/, $self->gui_option(q/Name/))"
\&        />
\&    </part>
\&  </instal>
.Ve
.Sp
</opt>
.IP "\fB3. \s-1WIZARD\s0 \s-1FILE\s0.\fR" 4
.IX Item "3. WIZARD FILE."
Now you can use the WizardMaker in your Wizard (or what is the
name of your Program?):
.Sp
.Vb 1
\&  use Tk::XML::WizardMaker;
.Ve
.Sp
.Vb 2
\&  # The WizardMaker is based on Tk::Frame, so we need a MainWindow
\&  my $mw = Tk::MainWindow->new();
.Ve
.Sp
.Vb 4
\&  # initialize a new instance. There are no pages yet.
\&  my $w = $mw->WizardMaker(
\&    -gui_file => 'gui.xml',
\&    -opt_file => 'opt.xml');
.Ve
.Sp
.Vb 2
\&  # add all valid pages to the instance.
\&  $w->build_all();
.Ve
.Sp
.Vb 2
\&  # Go!
\&  Tk::MainLoop;
.Ve
.Sp
Don't forget to write the installation code as well...
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\(bu" 4
Almost all features and beheavors of Tk::XML::WizardMaker can be customised.
.IP "\(bu" 4
All options can be defined in an \s-1XML\s0 file. The only exceptions are
options \fB\-gui\fR, \fB\-gui_file\fR, \fB\-opt\fR, \fB\-opt_file\fR which self define wich
\&\s-1XML\s0 files to use.
.IP "\(bu" 4
All options have build in defaults.
.IP "\(bu" 4
I don't really use the X11 resource database
and do provide some replacement options due to compatibility reasons.
.Sh "Instance whide options"
.IX Subsection "Instance whide options"
Since Assistant is a Tk::Frame, there can be more then one WizardMaker
instances in one time.
.PP
All instance wide options can be overwritten during WizardMaker
creation or later with given \s-1API\s0 or direct with Tk commando
\&\fBconfigure\fR.
.PP
They have form of document root attributes if defined in \s-1XML\s0 file:
.PP
.Vb 1
\&  background = "gray"
.Ve
.PP
or, they can be defined as perl list if specified as call or
config option:
.PP
.Vb 1
\&  $main_window->WizardMaker( -background => 'gray');
.Ve
.PP
\&\s-1GUI\s0 Description (only one of the following options is possible)
.PP
.Vb 4
\&  -gui              # a perl hash with assistent discription
\&  -gui_file         # an XML file with assistent discription. If you
\&                    # read it with XML::Simple->XMLIn, it beckoms the same
\&                    # form as -gui - hash.
.Ve
.PP
Process Instruction Descriptions and default values. (One or no
of the options must be defined)
.PP
.Vb 2
\&  -opt              # a perl hash
\&  -opt_file         # an XML file
.Ve
.PP
Grafic images to use on the WizardMaker pages (\s-1GIF\s0 files). The left
image will be displayed on the first and last pages, on all other
pages will be displayed top_image. The options can be redefined
for every page with top_image_name and top_image_file (see demo_03).
.PP
.Vb 2
\&  -top_image        # file to display on top of WizardMaker
\&  -left_image       # file to display on its left site
.Ve
.PP
Default Fonts (can be rewritten on the page level):
.PP
.Vb 8
\&  -title_font        # for the page title
\&  -subtitle_font     # for the page subtitle
\&  -subsubtitle_font  # for the page subsubtitle
\&  -small_font        # small font (not really used)
\&  -text_font         # text font
\&  -radio_font        # for radio buttons, check buttond and entries
\&  -fixed_font        # fixed font
\&  -button_font       # for command buttons
.Ve
.PP
Default Texts
.PP
.Vb 9
\&  -title             # in the title of parent window
\&  -help_title        # in the title of the online help
\&  -no_help_text      # default help text
\&  -warning_title     # in the title of warnings
\&  -no_warning_text   # default warning text
\&  -error_title       # in the title of the error messages
\&  -no_error_text     # default error text
\&  -info_title        # in the title of the online info
\&  -no_info_text      # default info text
.Ve
.PP
.Vb 9
\&  -button_help       # for help button
\&  -button_next       # for next button
\&  -button_back       # for back button
\&  -button_finish     # for finish button
\&  -button_cancel     # forcancel button
\&  -button_log        # for show log button
\&  -button_done       # for done button
\&  -button_dir_select # for dir select button
\&  -button_file_open  # for file open button
.Ve
.PP
Default Colors and Reliefs (can be rewritten on the page level):
.PP
.Vb 4
\&  -foreground         # for all common elements
\&  -background         # for all common elements
\&  -select_foreground  # for all common elements (heilight)
\&  -select_background  # for all common elements (heilight)
.Ve
.PP
.Vb 4
\&  -header_background        # for page headers
\&  -header_foreground        # for page headers
\&  -select_header_background # for page headers (heilight)
\&  -select_header_foreround  # for page headers (heilight)
.Ve
.PP
.Vb 6
\&  -header_background1 # for page header's title
\&  -header_foreground1 # for page header's title
\&  -header_background2 # for page header's subtitle
\&  -header_foreground2 # for page header's subtitle
\&  -header_background3 # for page header's subsubtitle
\&  -header_foreground3 # for page header's subsubtitle
.Ve
.PP
.Vb 5
\&  -button_background          # for buttons
\&  -button_foreground          #
\&  -button_select_foreground   #
\&  -button_select_background   #
\&  -button_disabled_foreground #
.Ve
.PP
.Vb 3
\&  -button_frame_background    # for the buttons' frame
\&  -button_frame_select_foreground
\&  -button_frame_select_background
.Ve
.PP
.Vb 5
\&  -radio_button_foreground    # for radio buttons
\&  -radio_button_background
\&  -radio_button_select_foreground
\&  -radio_button_select_background
\&  -radio_button_disabled_foreground
.Ve
.PP
.Vb 6
\&  -check_button_foreground    # for check buttons
\&  -check_button_background
\&  -check_button_select_foreground
\&  -check_button_select_indicator
\&  -check_button_select_background
\&  -check_button_disabled_foreground
.Ve
.PP
.Vb 6
\&  -entry_foreground           # for text entries
\&  -entry_background
\&  -entry_highlightbackground
\&  -entry_highlightcolor
\&  -entry_select_foreground
\&  -entry_select_background
.Ve
.PP
.Vb 2
\&  -relief            # relief (see Tk man pages) for common elements
\&  -buttons_relief    # relief (see Tk man pages) for buttons
.Ve
.PP
Geometry of the parent window (values following are user in \-geometry option):
.PP
.Vb 4
\&  -wish_width
\&  -wish_height
\&  -wish_x
\&  -wish_y
.Ve
.Sh "Page types and its options."
.IX Subsection "Page types and its options."
The WizardMaker can process pages of some predefined types. This is no really
restriction \- as you have access to the Programming Interface, you can
design any page layouts.
.IP "\(bu TextPage" 4
.IX Item "TextPage"
.Vb 2
\&  Pages of this type contain only a message text such as release notes
\&  or license agreements.
.Ve
.Sp
.Vb 1
\&  Page specific options / attributes / elements:
.Ve
.Sp
.Vb 2
\&    summary    # Option. Text to display
\&    file       # Option. File whith Text to display
.Ve
.IP "\(bu LabeledEntriesPage" 4
.IX Item "LabeledEntriesPage"
.Vb 2
\&  Pages of this type contain only entries to put single text. An entry can
\&  optionally have a button to search files and directories in file system.
.Ve
.Sp
.Vb 1
\&  Page specific options / attributes / elements:
.Ve
.Sp
.Vb 1
\&    LabeledEntry # Element with attributes:
.Ve
.Sp
.Vb 6
\&      name       # Internal name of element
\&      title      # Label
\&      status     # display status (normal or disabled)
\&      evaluate   # when 1, the title will be evalueted befor displaying.
\&      button     # predefined Button at right site
\&                 # (at present only dir_select / file_open)
.Ve
.IP "\(bu RadioButtonPage" 4
.IX Item "RadioButtonPage"
.Vb 1
\&  Pages of this type contain only Radio Buttons.
.Ve
.Sp
.Vb 1
\&  Page specific options / attributes / elements:
.Ve
.Sp
.Vb 1
\&    RadioButton  # Element with attributes:
.Ve
.Sp
.Vb 4
\&      name       # Internal name of element
\&      title      # Label
\&      status     # display status (normal or disabled)
\&      evaluate   # when 1, the title will be evalueted befor displaying.
.Ve
.IP "\(bu CheckButtonPage" 4
.IX Item "CheckButtonPage"
.Vb 1
\&  Pages of this type contain only Check Buttons.
.Ve
.Sp
.Vb 1
\&  Page specific options / attributes / elements:
.Ve
.Sp
.Vb 1
\&    RadioButton  # Element with attributes:
.Ve
.Sp
.Vb 4
\&      name       # Internal name of element
\&      title      # Label
\&      status     # display status (normal or disabled)
\&      evaluate   # when 1, the title will be evalueted befor displaying.
.Ve
.IP "\(bu ExternalPage" 4
.IX Item "ExternalPage"
.Vb 2
\&  Pages of this type are of free layout. The WizardMaker don't knows
\&  how to build them. Use the method
.Ve
.Sp
.Vb 1
\&  build_external_page()
.Ve
.Sp
.Vb 1
\&  to build such pages.
.Ve
.SH "API (Methods)"
.IX Header "API (Methods)"
.Sh "Building WizardMaker:"
.IX Subsection "Building WizardMaker:"
.IP "\(bu new" 4
.IX Item "new"
.Vb 2
\&  It is simple the Tk - constructor. It creates new instance of
\&  WizardMaker. No pages are added yet.
.Ve
.Sp
.Vb 1
\&  Parameters are -gui, -gui_file, -opt, -opt_file
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    my $wizard = MainWindow->new()->WizardMaker(-gui_file=>'my_gui_file.xml');
.Ve
.IP "\(bu build_all" 4
.IX Item "build_all"
.Vb 1
\&  Processes all options , creates all pages and shows the assistent
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->build_all();
.Ve
.IP "\(bu add_all_pages" 4
.IX Item "add_all_pages"
.Vb 1
\&  Processes all options , creates all pages
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->add_all_pages();
.Ve
.IP "\(bu show" 4
.IX Item "show"
.Vb 1
\&  Shows the assistent
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->show();
.Ve
.Sh "Node building and navigation"
.IX Subsection "Node building and navigation"
.IP "\(bu build_node" 4
.IX Item "build_node"
.Vb 1
\&  Create only node structure.
.Ve
.Sp
.Vb 1
\&  The only parameter is a hash reference to page attributes
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->build_node($p);
.Ve
.IP "\(bu build_generic_node" 4
.IX Item "build_generic_node"
.Vb 2
\&  Calls build_node and makes some preparations for common layout.
\&  This method should never be used directly.
.Ve
.Sp
.Vb 1
\&  The only parameter is a hash reference to attributes of new page.
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->build_generic_node($p);
.Ve
.IP "\(bu build_external_node" 4
.IX Item "build_external_node"
.Vb 2
\&  This procedure is intend to build page types not provided by
\&  WizardMaker themself.
.Ve
.Sp
.Vb 1
\&  The only parameter is a hash reference to attributes of new page.
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->build_external_node($p);
.Ve
.IP "\(bu link_node" 4
.IX Item "link_node"
.Vb 2
\&  All pages are bind together with double linked list.
\&  This method links a node on the given position.
.Ve
.Sp
.Vb 1
\&  Paremeters are:
.Ve
.Sp
.Vb 3
\&    page name
\&    how to link ('after', 'before')
\&    where to link   (name, 'first', 'last')
.Ve
.Sp
.Vb 4
\&  Usage Example:
\&    $wizard->link_node('myVeryFirstPage', 'before', 'first');
\&    $wizard->link_node('myVeryLastPage', 'after', 'last');
\&    $wizard->link_node('mySecondPage', 'after', 'myVeryFirstPage');
.Ve
.IP "\(bu unlink_node" 4
.IX Item "unlink_node"
.Vb 2
\&  Unlinks a node from node list. The node can be accessed
\&  afterwards by its name.
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->unlink_node('myVeryFirstPage');
.Ve
.IP "\(bu find_node" 4
.IX Item "find_node"
.Vb 1
\&  Returns name of searched page or undef if page does not exist.
.Ve
.Sp
.Vb 1
\&  The only parameter is the description of node( name, 'first', 'last')
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    my $page_name = $wizard->find_node('last');
.Ve
.IP "\(bu first_node" 4
.IX Item "first_node"
.Vb 1
\&  Retutns the first node name in the node list
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    my $page_name = $wizard->first_node();
.Ve
.IP "\(bu last_node" 4
.IX Item "last_node"
.Vb 1
\&  Retutns the last node name in the node list
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    my $page_name = $wizard->last_node();
.Ve
.IP "\(bu current_node" 4
.IX Item "current_node"
.Vb 1
\&  Sets or returns the current node name in the node list
.Ve
.Sp
.Vb 3
\&  Usage Example:
\&    my $page_name = $wizard->current_node();
\&    $wizard->current_node('myNewPage');
.Ve
.IP "\(bu is_linked" 4
.IX Item "is_linked"
.Vb 1
\&  Retutns true if node is linked into the node list
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    print 'I am insite' if ($wizard->is_linked('myGoodPage'));
.Ve
.Sh "Page building"
.IX Subsection "Page building"
.IP "\(bu add_text_page" 4
.IX Item "add_text_page"
.Vb 1
\&  After a node was created, a Text Page will be constructed.
.Ve
.Sp
.Vb 1
\&  Parameters are: Page frame and page description - hash reference
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->add_text_page($pf, $p);
.Ve
.IP "\(bu add_le_page" 4
.IX Item "add_le_page"
.Vb 1
\&  After a node was created, a labeled Entry Page will be constructed
.Ve
.Sp
.Vb 1
\&  Parameters are: Page frame and page desctiption hash reference
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->add_le_page($pf, $p);
.Ve
.IP "\(bu add_rb_page" 4
.IX Item "add_rb_page"
.Vb 1
\&  After a node was created, a RadioButton Page will be constructed
.Ve
.Sp
.Vb 1
\&  Parameters are: Page frame and page desctiption hash reference
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->add_rb_page($pf, $p);
.Ve
.IP "\(bu add_cb_page" 4
.IX Item "add_cb_page"
.Vb 1
\&  After a node was created, a CheckButton Page will be constructed
.Ve
.Sp
.Vb 1
\&  Parameters are: Page frame and page desctiption hash reference
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->add_cb_page($pf, $p);
.Ve
.IP "\(bu add_external_frame" 4
.IX Item "add_external_frame"
.Vb 1
\&  After a node was created, an External Page will be constructed
.Ve
.Sp
.Vb 1
\&  Parameters are: Page frame and page desctiption hash reference
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->add_external_frame($pf, $p);
.Ve
.Sp
.Vb 2
\&  This method is usefull only if exists $p->{build_frame_code}.
\&  It must be a CODE REF.
.Ve
.IP "\(bu add_radio_button" 4
.IX Item "add_radio_button"
.Vb 1
\&  Adds a radio button to RadioButton Page
.Ve
.Sp
.Vb 7
\&  Parameters are:
\&    target frame
\&    title
\&    variable behind the entry
\&    initial value of this variable
\&    state
\&    width of value
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu add_check_button" 4
.IX Item "add_check_button"
.Vb 1
\&  Adds a Check button to CheckButton Page
.Ve
.Sp
.Vb 6
\&  Parameters are:
\&    target frame
\&    label text
\&    state,
\&    reference to the variable behind the entry
\&    width of title
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu drop_page" 4
.IX Item "drop_page"
.Vb 1
\&  Drops a given page (inclusive node)
.Ve
.Sp
.Vb 1
\&  The only parameter is the page name
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->drop_page('BadPage');
.Ve
.Sh "Common Elements"
.IX Subsection "Common Elements"
.IP "\(bu dir_select_dialog" 4
.IX Item "dir_select_dialog"
.Vb 1
\&  opens dialog to help user to fild directory.
.Ve
.Sp
.Vb 3
\&  Parameters are
\&    - reference to variable for directory name
\&    - Toplevel window title
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu file_open_dialog" 4
.IX Item "file_open_dialog"
.Vb 1
\&  opens standard system dialog to help user to fild a file.
.Ve
.Sp
.Vb 3
\&  Parameters are
\&    - textvariable for file name
\&    - Toplevel window title
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu show_message" 4
.IX Item "show_message"
.Vb 1
\&  opens a message windows
.Ve
.Sp
.Vb 5
\&  Parameters are
\&    message text
\&    type  (info/help/warning/error)
\&    title text
\&    buttons description (see -type option of Tk::messageBox)
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.Sh "Configure element options"
.IX Subsection "Configure element options"
.IP "\(bu get_assistent_id" 4
.IX Item "get_assistent_id"
.Vb 2
\&  It is possible to have more than one WizardMaker instance opened
\&  by parallel. get_assistent_id returns an internal instance ID.
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->get_assistent_id();
.Ve
.IP "\(bu get_common_element" 4
.IX Item "get_common_element"
.Vb 2
\&  Returns value of a commont element, so you can direct manipulate
\&  things like buttons and images.
.Ve
.Sp
.Vb 4
\&    assistent_id   - only usefull if you have more then one instance
\&    current_node   - name of the current node
\&    total_pages    - pages builded (not used)
\&    status         - 'GOOD' or 'CANCELED' if WizardMaker was not finished propertly
.Ve
.Sp
.Vb 5
\&    BUTTONS:
\&      button_back
\&      button_cancel
\&      button_help
\&      button_next
.Ve
.Sp
.Vb 5
\&    FRAMES:
\&      main_frame
\&      user_frame
\&      command_frame
\&      deco_frame
.Ve
.Sp
.Vb 3
\&    IMAGES (as Tk::Label):
\&      left_image
\&      top_image
.Ve
.Sp
.Vb 2
\&    ALL PAGES (as HASH REFS):
\&      pages
.Ve
.Sp
.Vb 1
\&  The only parameter is the name of common element
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->get_common_element('current_node');
.Ve
.IP "\(bu cget_common_element" 4
.IX Item "cget_common_element"
.Vb 2
\&  Returns current value of given common element options. Just like cget.
\&  This method is only usefull for common elements - Tk objects.
.Ve
.Sp
.Vb 1
\&  Parameters are the element name and option name.
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->cget_common_element('left_image', 'image');
.Ve
.IP "\(bu configure_common_element" 4
.IX Item "configure_common_element"
.Vb 1
\&  Manipulate common element options. Just like configure.
.Ve
.Sp
.Vb 1
\&  Parameters are the element name and an option list.
.Ve
.Sp
.Vb 3
\&  Usage Example:
\&    my $image = $wizard->Photo('other_image', -file=>'other_image.gif');
\&    $wizard->configure_common_element('left_image', ('image', $image));
.Ve
.IP "\(bu add_common_element" 4
.IX Item "add_common_element"
.Vb 2
\&  Adds a new common element. Parameter are element name and its value. The
\&  Value can be an object reference too.
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->add_common_element('newHiddenStatusElement', 'OK');
.Ve
.IP "\(bu drop_common_element" 4
.IX Item "drop_common_element"
.Vb 1
\&  Removes common element. All packed subelements are forgotten.
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->drop_common_element('newHiddenStatusElement');
.Ve
.IP "\(bu set_common_image" 4
.IX Item "set_common_image"
.Vb 5
\&  Sets left/top image. The left_image and right_image are common
\&  elements shown at the left site of WizardMaker's first and last
\&  pages and on the top of all other pages. The images are static,
\&  but you can manipulate them dynamic with this method. Alternative
\&  you can use get_common_element() and configure_common_element().
.Ve
.Sp
.Vb 4
\&  Parameters are:
\&    - position (can be 'top' or 'left'),
\&    - image name
\&    - image file
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    In the XML description of a page:
.Ve
.Sp
.Vb 5
\&    <page name="this_page"
\&        status="normal"
\&        type="TextPage"
\&        title="This Page"
\&        subtitle="This Page Subtitle"
.Ve
.Sp
.Vb 5
\&        pre_next_button_code="
\&          $self->set_common_image('top', 'next_picture', 'next_picture.gif');
\&          1;
\&        "
\&     />
.Ve
.IP "\(bu reset_buttons" 4
.IX Item "reset_buttons"
.Vb 3
\&  Resets visual options of standard buttons to defaults.
\&  Paremeter is list of button names. If ommited, all buttons (button_back,
\&  button_cancel, button_help, button_next) will be reseted.
.Ve
.IP "\(bu get_page" 4
.IX Item "get_page"
.Vb 1
\&  Returns page as Object ref.
.Ve
.Sp
.Vb 1
\&  The only parameter is the page name
.Ve
.Sp
.Vb 2
\&  Usage Example:
\&    $wizard->get_page('myPage');
.Ve
.IP "\(bu get_page_element" 4
.IX Item "get_page_element"
.Vb 1
\&  Returns page element as Object Reference
.Ve
.Sp
.Vb 3
\&  Parameters are the page name and element description.
\&  The element description can be element name or one of
\&  following
.Ve
.Sp
.Vb 4
\&    RadioButton
\&    CheckButton
\&    LabeledEntry
\&    summary_text.
.Ve
.Sp
.Vb 1
\&  In the last case the third parameter - subelement should be used.
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu cget_tk_element" 4
.IX Item "cget_tk_element"
.Vb 1
\&  Returns current value of given element options. Just like cget.
.Ve
.Sp
.Vb 2
\&  Parameters are the element reference (like given by get_page_element)
\&  and the option name.
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu configure_tk_element" 4
.IX Item "configure_tk_element"
.Vb 3
\&  Manipulate the Title of a builded page. Just like configure.
\&  Parameters are the element reference (like given by get_page_element)
\&  and an option list.
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu get_user_frame" 4
.IX Item "get_user_frame"
.Vb 2
\&  Returns the user frame of given page. The user frame is a part
\&  of page frame.
.Ve
.Sp
.Vb 1
\&  The only parameter is page name.
.Ve
.IP "\(bu gui_option" 4
.IX Item "gui_option"
.Vb 3
\&  Get or set GUI option. Usefull for programmatic manipulation of
\&  GUI values. The initial values are set normally over OPT.XML
\&  file.
.Ve
.Sp
.Vb 2
\&  The options are placed in WizardMaker as
\&    $self->{opt}->{gui}->{$option_name}->{$option_value}
.Ve
.Sp
.Vb 1
\&  Parameters are option name and option value.
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.IP "\(bu get_page_frame" 4
.IX Item "get_page_frame"
.Vb 1
\&  Returns page frame as Object.
.Ve
.Sp
.Vb 1
\&  The only parameter is page name.
.Ve
.Sp
.Vb 1
\&  Usage Example see in demo directory.
.Ve
.SH "DEPENDANCIES"
.IX Header "DEPENDANCIES"
.Vb 6
\&    Tk
\&    XML::Simple     (requires XML::Parser and File::Spec)
\&    Data::Dumper
\&    Storable
\&    Win32           (Win32 plattform only)
\&    Win32API::File  (Win32 plattform only)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& XML::Simple, Tk::Wizard
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Viktor Zimmermann, <ZiMTraining@gmx.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004 by Viktor Zimmermann
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
